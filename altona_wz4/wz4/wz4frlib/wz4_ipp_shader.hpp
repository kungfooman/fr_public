/****************************************************************************/
/***                                                                      ***/
/***   header file generated by ASC 1.63 - altona shader compiler.        ***/
/***                                                                      ***/
/****************************************************************************/

#ifndef HEADER_WZ4FRLIB_WZ4_IPP_SHADER_ASC
#define HEADER_WZ4FRLIB_WZ4_IPP_SHADER_ASC

#include "base/graphics.hpp"

/****************************************************************************/

enum Wz4IppColorGradePSPerm
{
  Wz4IppColorGradePSPermMask_UseSMH         = 0x0001,
  Wz4IppColorGradePSPermMask_UseGamma       = 0x0002,
};
enum Wz4IppSampleRect16PSPerm
{
  Wz4IppSampleRect16PSPermMask_AlphaWeighted = 0x0001,
};
enum Wz4IppSamplerDofPSPerm
{
  Wz4IppSamplerDofPSPerm_DebugNormal        = 0x0000,
  Wz4IppSamplerDofPSPerm_DebugScreen        = 0x0001,
  Wz4IppSamplerDofPSPerm_DebugBlur0         = 0x0002,
  Wz4IppSamplerDofPSPerm_DebugBlur1         = 0x0003,
  Wz4IppSamplerDofPSPerm_DebugZ             = 0x0004,
  Wz4IppSamplerDofPSPerm_DebugFade          = 0x0005,
  Wz4IppSamplerDofPSPermMask_Debug          = 0x000f,
};
enum Wz4IppSamplerDof2PSPerm
{
  Wz4IppSamplerDof2PSPerm_DebugNone         = 0x0000,
  Wz4IppSamplerDof2PSPerm_DebugCOC          = 0x0001,
  Wz4IppSamplerDof2PSPerm_DebugSmb          = 0x0002,
  Wz4IppSamplerDof2PSPerm_DebugMeb          = 0x0003,
  Wz4IppSamplerDof2PSPerm_DebugLab          = 0x0004,
  Wz4IppSamplerDof2PSPermMask_Debug         = 0x0007,
};
enum Wz4IPPSSAOMainPerm
{
  Wz4IPPSSAOMainPerm_Samples4               = 0x0000,
  Wz4IPPSSAOMainPerm_Samples8               = 0x0001,
  Wz4IPPSSAOMainPerm_Samples16              = 0x0002,
  Wz4IPPSSAOMainPermMask_Samples            = 0x0003,
  Wz4IPPSSAOMainPermMask_Fog                = 0x0004,
};
enum Wz4IPPSSAOFinishPerm
{
  Wz4IPPSSAOFinishPerm_OutputResult         = 0x0000,
  Wz4IPPSSAOFinishPerm_OutputNormals        = 0x0001,
  Wz4IPPSSAOFinishPerm_OutputSSAO           = 0x0002,
  Wz4IPPSSAOFinishPermMask_Output           = 0x0003,
};
enum Layer2dMtrlPSPerm
{
  Layer2dMtrlPSPerm_T1Off                   = 0x0000,
  Layer2dMtrlPSPerm_T1Mul                   = 0x0001,
  Layer2dMtrlPSPerm_T1Add                   = 0x0002,
  Layer2dMtrlPSPerm_T1Sub                   = 0x0003,
  Layer2dMtrlPSPermMask_T1                  = 0x0007,
};

/****************************************************************************/

struct Wz4IppVSPara
{
public:
  sMatrix44 mvp;
  static const sInt RegStart = 0;
  static const sInt RegCount = 4;
  static const sInt Slot = sCBUFFER_VS|0;
#line 76 "wz4_ipp_shader.hpp"
};

struct Wz4IppPSPara
{
public:
  sVector4 Color0;
  sVector4 Color1;
  sVector4 Color2;
  sVector4 Color3;
  static const sInt RegStart = 0;
  static const sInt RegCount = 4;
  static const sInt Slot = sCBUFFER_PS|0;
#line 89 "wz4_ipp_shader.hpp"
};

struct Wz4IppColorGradePSPara
{
public:
  sVector4 Params1;
  sVector4 Gamma;
  sVector4 LumWeights;
  sVector4 VignetteMatrix;
  sVector4 VignetteShift;
  sVector4 MatrixSr;
  sVector4 MatrixSg;
  sVector4 MatrixSb;
  sVector4 MatrixMr;
  sVector4 MatrixMg;
  sVector4 MatrixMb;
  sVector4 MatrixHr;
  sVector4 MatrixHg;
  sVector4 MatrixHb;
  static const sInt RegStart = 0;
  static const sInt RegCount = 14;
  static const sInt Slot = sCBUFFER_PS|0;
#line 112 "wz4_ipp_shader.hpp"
};

struct Wz4IppFXAA3Para
{
public:
  sVector4 rcpFrame;
  static const sInt RegStart = 0;
  static const sInt RegCount = 1;
  static const sInt Slot = sCBUFFER_PS|0;
#line 122 "wz4_ipp_shader.hpp"
};

struct Wz4IppVSCustomPara
{
public:
  sMatrix44 mvp;
  sMatrix44 mv;
  sVector4 eye;
  sVector4 vs_var0;
  sVector4 vs_var1;
  sVector4 vs_var2;
  sVector4 vs_var3;
  sVector4 vs_var4;
  static const sInt RegStart = 0;
  static const sInt RegCount = 14;
  static const sInt Slot = sCBUFFER_VS|0;
#line 139 "wz4_ipp_shader.hpp"
};

struct Wz4IppPSCustomPara
{
public:
  sMatrix44 mvp;
  sMatrix44 mv;
  sVector4 eye;
  sVector4 ps_var0;
  sVector4 ps_var1;
  sVector4 ps_var2;
  sVector4 ps_var3;
  sVector4 ps_var4;
  sVector4 resolution;
  static const sInt RegStart = 0;
  static const sInt RegCount = 15;
  static const sInt Slot = sCBUFFER_PS|0;
#line 157 "wz4_ipp_shader.hpp"
};

struct Wz4IppSSAOPSPara
{
public:
  sVector4 projScale;
  sVector4 invProjScale;
  sVector4 occludeAndRadius;
  sVector4 uvStep;
  sVector4 FogMinMaxDens;
  sVector4 FogCenter;
  sVector4 sampleVec[24];
  static const sInt RegStart = 0;
  static const sInt RegCount = 30;
  static const sInt Slot = sCBUFFER_PS|0;
#line 751 "wz4_ipp_shader.asc"
  void Set(const sViewport &view);
#line 175 "wz4_ipp_shader.hpp"
};

struct Wz4IppSampleRect16PS
{
public:
  sVector4 Color[4];
  sVector4 Offa[4];
  sVector4 Offb[4];
  static const sInt RegStart = 0;
  static const sInt RegCount = 12;
  static const sInt Slot = sCBUFFER_PS|0;
#line 187 "wz4_ipp_shader.hpp"
};

struct Wz4IppSSAOFinishPSPara
{
public:
  sVector4 Color[4];
  sVector4 Offa[4];
  sVector4 Offb[4];
  sVector4 Tweak;
  sVector4 ScrColor;
  static const sInt RegStart = 0;
  static const sInt RegCount = 14;
  static const sInt Slot = sCBUFFER_PS|0;
#line 201 "wz4_ipp_shader.hpp"
};


/****************************************************************************/

class Wz4IppCopy : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppSharpen : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppDebugZ : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppDebugNormal : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppDebugAlpha : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppSampleLine9 : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppSampleRect9 : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppSampleRect16 : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  Wz4IppSampleRect16();
  void SelectShaders(sVertexFormatHandle *);
#line 454 "wz4_ipp_shader.asc"

    sBool AlphaWeighted;
  
#line 267 "wz4_ipp_shader.cpp"
};
class Wz4IppSampleDof : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  Wz4IppSampleDof();
  void SelectShaders(sVertexFormatHandle *);
#line 552 "wz4_ipp_shader.asc"

    sInt Debug; 
  
#line 280 "wz4_ipp_shader.cpp"
};
class Wz4IppSampleDof2 : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  Wz4IppSampleDof2();
  void SelectShaders(sVertexFormatHandle *);
#line 674 "wz4_ipp_shader.asc"

    sInt Debug; 
  
#line 293 "wz4_ipp_shader.cpp"
};
class Wz4IppCoCDof2 : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppSSAOMain : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  Wz4IppSSAOMain();
  void SelectShaders(sVertexFormatHandle *);
#line 884 "wz4_ipp_shader.asc"

    sInt SampleLevel; // 0=4 samples, 1=8 samples, 2=16 samples
    sInt FogMode;
  
#line 314 "wz4_ipp_shader.cpp"
};
class Wz4IppSSAOFinish : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  Wz4IppSSAOFinish();
  void SelectShaders(sVertexFormatHandle *);
#line 1030 "wz4_ipp_shader.asc"

    sInt Output;
  
#line 327 "wz4_ipp_shader.cpp"
};
class Wz4IppColorBalance : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppColorSaw : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppColorGrade : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  void SelectShaders(sVertexFormatHandle *);
#line 1123 "wz4_ipp_shader.asc"

    sBool UseSMH;
    sBool UseGamma;
  
#line 354 "wz4_ipp_shader.cpp"
};
class Wz4IppCrashZoom : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Layer2dMtrl : public sMaterial
{
  static sShader *VS();
  static sShader *PS(sInt);
public:
  Layer2dMtrl();
  void SelectShaders(sVertexFormatHandle *);
#line 1325 "wz4_ipp_shader.asc"

    sInt MixMode;
  
#line 374 "wz4_ipp_shader.cpp"
};
class Wz4IppCrackFixer : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppFXAA3Prepare : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppFXAA3 : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppColorMath : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};
class Wz4IppCustom : public sMaterial
{
  static sShader *VS();
  static sShader *PS();
public:
  void SelectShaders(sVertexFormatHandle *);
};

/****************************************************************************/

#endif

