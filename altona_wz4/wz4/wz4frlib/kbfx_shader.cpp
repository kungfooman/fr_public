/****************************************************************************/
/***                                                                      ***/
/***   source file generated by ASC 1.63 - altona shader compiler.        ***/
/***                                                                      ***/
/****************************************************************************/

#include "kbfx_shader.hpp"

/****************************************************************************/

#line 12 "kbfx_shader.cpp"
#line 13 "kbfx_shader.cpp"
#line 14 "kbfx_shader.cpp"
#line 15 "kbfx_shader.cpp"

/****************************************************************************/


/****************************************************************************/

sShader *VideoDistortMtrl::VS()
{
#if sRENDERER==sRENDER_DX9
  static const sU32 data[] = 
  {
  0xfffe0300,                                                        //  vs_3_0           
  0x0200001f,0x80000000,0x900f0000,                                  //  dcl_position     v0
  0x0200001f,0x8000000a,0x900f0001,                                  //  dcl_color0       v1
  0x0200001f,0x80000005,0x900f0002,                                  //  dcl_texcoord0    v2
  0x0200001f,0x80000000,0xe00f0000,                                  //  dcl_position     oT0
  0x0200001f,0x80000005,0xe0030001,                                  //  dcl_texcoord0    oT1.xy
  0x0200001f,0x8000000a,0xe00f0002,                                  //  dcl_color0       oT2
  0x03000005,0x800f0000,0xa0e40001,0x90550000,                       //  mul              r0,c1,v0.y
  0x04000004,0x800f0000,0x90000000,0xa0e40000,0x80e40000,            //  mad              r0,v0.x,c0,r0
  0x04000004,0x800f0000,0x90aa0000,0xa0e40002,0x80e40000,            //  mad              r0,v0.z,c2,r0
  0x03000002,0xe00f0000,0x80e40000,0xa0e40003,                       //  add              oT0,r0,c3
  0x02000001,0xe0030001,0x90e40002,                                  //  mov              oT1.xy,v2
  0x02000001,0xe00f0002,0x90e40001,                                  //  mov              oT2,v1
  0x0000ffff,                                                        //  end              
  };
#endif
#if sRENDERER==sRENDER_DX11
  static const sU8 data[] = 
  {
    0x44,0x58,0x42,0x43,0xa0,0x4b,0x4d,0xd2,0x4c,0xbd,0x1b,0xa6,0x57,0xfd,0x19,0xe0,
    0x94,0x1b,0x01,0x60,0x01,0x00,0x00,0x00,0x84,0x03,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xf4,0x00,0x00,0x00,0x64,0x01,0x00,0x00,0xd8,0x01,0x00,0x00,
    0x08,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0xb8,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x40,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xfe,0xff,
    0x00,0x01,0x00,0x00,0x84,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x5f,0x30,0x00,0x3c,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x76,0x70,0x00,
    0x02,0x00,0x03,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,
    0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,
    0x65,0x72,0x20,0x39,0x2e,0x32,0x39,0x2e,0x39,0x35,0x32,0x2e,0x33,0x31,0x31,0x31,
    0x00,0xab,0xab,0xab,0x49,0x53,0x47,0x4e,0x68,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x59,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x0f,0x00,0x00,0x5f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x50,0x4f,0x53,0x49,
    0x54,0x49,0x4f,0x4e,0x00,0x43,0x4f,0x4c,0x4f,0x52,0x00,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x00,0x4f,0x53,0x47,0x4e,0x6c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x03,0x0c,0x00,0x00,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x50,
    0x4f,0x53,0x49,0x54,0x49,0x4f,0x4e,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0x43,0x4f,0x4c,0x4f,0x52,0x00,0xab,0x53,0x48,0x44,0x52,0x28,0x01,0x00,0x00,
    0x40,0x00,0x01,0x00,0x4a,0x00,0x00,0x00,0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,
    0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0xf2,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x32,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x67,0x00,0x00,0x04,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,
    0x02,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x08,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x15,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xa6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x02,0x00,0x00,0x00,
    0x36,0x00,0x00,0x05,0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x1e,0x10,0x00,
    0x01,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,
    0x07,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
  };
#endif
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_VERTEX,0,0);
#endif
}

sShader *VideoDistortMtrl::PS()
{
#if sRENDERER==sRENDER_DX9
  static const sU32 data[] = 
  {
  0xffff0300,                                                        //  ps_3_0           
  0x05000051,0xa00f0000,0x3e59b3d0,0x3f371759,0x3d93dd98,0x3f800000, //  def              c0,  0.213,  0.715,  0.072,  1.000
  0x05000051,0xa00f0001,0xbdd9b3d0,0xbeb71759,0x3eed844d,0x3f000000, //  def              c1, -0.106, -0.358,  0.464,  0.500
  0x05000051,0xa00f0002,0x3ec9930c,0xbeb71759,0xbd13dd98,0x3f000000, //  def              c2,  0.394, -0.358, -0.036,  0.500
  0x05000051,0xa00f0003,0x3f800000,0x00000000,0x40000000,0xbf800000, //  def              c3,  1.000,  0.000,  2.000, -1.000
  0x05000051,0xa00f0004,0x3f800000,0xbe4ebf49,0xbf183266,0x3ecbe238, //  def              c4,  1.000, -0.202, -0.595,  0.398
  0x0200001f,0x8000000a,0x90030000,                                  //  dcl              v0.xy
  0x0200001f,0x80000005,0x90030001,                                  //  dcl              v1.xy
  0x0200001f,0x90000000,0xa00f0800,                                  //  dcl_2d           s0
  0x03000042,0x800f0000,0x90e40001,0xa0e40800,                       //  texld            r0,v1,s0
  0x04000004,0x800f0001,0x80240000,0xa0400003,0xa0150003,            //  mad              r1,r0.xyzx,c3.xxxy,c3.yyyx
  0x03000008,0x80010000,0x80e40000,0xa0e40000,                       //  dp3              r0.x,r0,c0
  0x03000009,0x80010002,0x80e40001,0xa0e40002,                       //  dp4              r2.x,r1,c2
  0x03000009,0x80010001,0x80e40001,0xa0e40001,                       //  dp4              r1.x,r1,c1
  0x03000002,0x80010001,0x80000001,0x90000000,                       //  add              r1.x,r1.x,v0.x
  0x03000002,0x80020000,0x80000001,0x91550000,                       //  add              r0.y,r1.x,-v0.y
  0x03000002,0x80010001,0x80000002,0x90000000,                       //  add              r1.x,r2.x,v0.x
  0x03000002,0x80040000,0x80000001,0x91550000,                       //  add              r0.z,r1.x,-v0.y
  0x02000001,0x80080000,0xa0ff0000,                                  //  mov              r0.w,c0.w
  0x03000008,0x80010800,0x80f80000,0xa0f80003,                       //  dp3              oC0.x,r0.xzww,c3.xzww
  0x03000009,0x80020800,0x80e40000,0xa0e40004,                       //  dp4              oC0.y,r0,c4
  0x03000008,0x80040800,0x80f40000,0xa0f80003,                       //  dp3              oC0.z,r0.xyww,c3.xzww
  0x02000001,0x80080800,0xa0ff0000,                                  //  mov              oC0.w,c0.w
  0x0000ffff,                                                        //  end              
  };
#endif
#if sRENDERER==sRENDER_DX11
  static const sU8 data[] = 
  {
    0x44,0x58,0x42,0x43,0x37,0x38,0x40,0x76,0x76,0x42,0x1e,0xcb,0x77,0xdf,0xf9,0xdc,
    0xc6,0xe8,0x88,0x35,0x01,0x00,0x00,0x00,0xf4,0x03,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xd0,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x54,0x01,0x00,0x00,
    0x78,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xff,0xff,
    0x00,0x01,0x00,0x00,0x63,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x73,0x30,0x5f,0x00,0x73,0x30,0x00,0x4d,
    0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,
    0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,
    0x72,0x20,0x39,0x2e,0x32,0x39,0x2e,0x39,0x35,0x32,0x2e,0x33,0x31,0x31,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x48,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x03,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
    0x43,0x4f,0x4c,0x4f,0x52,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,
    0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,0x41,0x52,0x47,0x45,
    0x54,0x00,0xab,0xab,0x53,0x48,0x44,0x52,0x1c,0x02,0x00,0x00,0x40,0x00,0x00,0x00,
    0x87,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,
    0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x62,0x10,0x00,0x03,
    0x32,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x03,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x82,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x45,0x00,0x00,0x09,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x0a,0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xd0,0xb3,0x59,0x3e,
    0x59,0x17,0x37,0x3f,0x98,0xdd,0x93,0x3d,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x11,0x00,0x00,0x0a,0x12,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xd0,0xb3,0xd9,0xbd,0x59,0x17,0xb7,0xbe,
    0x4d,0x84,0xed,0x3e,0x00,0x00,0x00,0x3f,0x11,0x00,0x00,0x0a,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x0c,0x93,0xc9,0x3e,0x59,0x17,0xb7,0xbe,0x98,0xdd,0x13,0xbd,0x00,0x00,0x00,0x3f,
    0x00,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x1a,0x10,0x10,0x80,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x0a,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x22,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x10,0x10,0x80,
    0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x82,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x11,0x00,0x00,0x0a,
    0x22,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x49,0xbf,0x4e,0xbe,0x66,0x32,0x18,0xbf,
    0x38,0xe2,0xcb,0x3e,0x10,0x00,0x00,0x0a,0x42,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x03,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x00,0x40,0x00,0x00,0x80,0xbf,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x0a,
    0x12,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x86,0x03,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0xbf,
    0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
  };
#endif
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_PIXEL,0,0);
#endif
}

void VideoDistortMtrl::SelectShaders(sVertexFormatHandle *format)
{
#line 46 "kbfx_shader.asc"

    VertexShader = VS();
    PixelShader = PS();
  
#line 230 "kbfx_shader.cpp"
}

sShader *BlockTransMtrl::VS()
{
#if sRENDERER==sRENDER_DX9
  static const sU32 data[] = 
  {
  0xfffe0300,                                                        //  vs_3_0           
  0x0200001f,0x80000000,0x900f0000,                                  //  dcl_position     v0
  0x0200001f,0x8000000a,0x900f0001,                                  //  dcl_color0       v1
  0x0200001f,0x80000005,0x900f0002,                                  //  dcl_texcoord0    v2
  0x0200001f,0x80000000,0xe00f0000,                                  //  dcl_position     oT0
  0x0200001f,0x80000005,0xe0030001,                                  //  dcl_texcoord0    oT1.xy
  0x0200001f,0x8000000a,0xe00f0002,                                  //  dcl_color0       oT2
  0x03000005,0x800f0000,0xa0e40001,0x90550000,                       //  mul              r0,c1,v0.y
  0x04000004,0x800f0000,0x90000000,0xa0e40000,0x80e40000,            //  mad              r0,v0.x,c0,r0
  0x04000004,0x800f0000,0x90aa0000,0xa0e40002,0x80e40000,            //  mad              r0,v0.z,c2,r0
  0x03000002,0xe00f0000,0x80e40000,0xa0e40003,                       //  add              oT0,r0,c3
  0x02000001,0xe0030001,0x90e40002,                                  //  mov              oT1.xy,v2
  0x02000001,0xe00f0002,0x90e40001,                                  //  mov              oT2,v1
  0x0000ffff,                                                        //  end              
  };
#endif
#if sRENDERER==sRENDER_DX11
  static const sU8 data[] = 
  {
    0x44,0x58,0x42,0x43,0xa0,0x4b,0x4d,0xd2,0x4c,0xbd,0x1b,0xa6,0x57,0xfd,0x19,0xe0,
    0x94,0x1b,0x01,0x60,0x01,0x00,0x00,0x00,0x84,0x03,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xf4,0x00,0x00,0x00,0x64,0x01,0x00,0x00,0xd8,0x01,0x00,0x00,
    0x08,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0xb8,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x40,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xfe,0xff,
    0x00,0x01,0x00,0x00,0x84,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x5f,0x30,0x00,0x3c,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x76,0x70,0x00,
    0x02,0x00,0x03,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,
    0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,
    0x65,0x72,0x20,0x39,0x2e,0x32,0x39,0x2e,0x39,0x35,0x32,0x2e,0x33,0x31,0x31,0x31,
    0x00,0xab,0xab,0xab,0x49,0x53,0x47,0x4e,0x68,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x59,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x0f,0x00,0x00,0x5f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x50,0x4f,0x53,0x49,
    0x54,0x49,0x4f,0x4e,0x00,0x43,0x4f,0x4c,0x4f,0x52,0x00,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x00,0x4f,0x53,0x47,0x4e,0x6c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x03,0x0c,0x00,0x00,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x50,
    0x4f,0x53,0x49,0x54,0x49,0x4f,0x4e,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0x43,0x4f,0x4c,0x4f,0x52,0x00,0xab,0x53,0x48,0x44,0x52,0x28,0x01,0x00,0x00,
    0x40,0x00,0x01,0x00,0x4a,0x00,0x00,0x00,0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,
    0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0xf2,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x32,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x67,0x00,0x00,0x04,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,
    0x02,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x08,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x15,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xa6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x02,0x00,0x00,0x00,
    0x36,0x00,0x00,0x05,0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x1e,0x10,0x00,
    0x01,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,
    0x07,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
  };
#endif
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_VERTEX,0,0);
#endif
}

sShader *BlockTransMtrl::PS()
{
#if sRENDERER==sRENDER_DX9
  static const sU32 data[] = 
  {
  0xffff0300,                                                        //  ps_3_0           
  0x05000051,0xa00f0000,0x3f800000,0x00000000,0x00000000,0x00000000, //  def              c0,  1.000,  0.000,  0.000,  0.000
  0x0200001f,0x80000005,0x90030000,                                  //  dcl              v0.xy
  0x0200001f,0x90000000,0xa00f0800,                                  //  dcl_2d           s0
  0x03000042,0x800f0000,0x90e40000,0xa0e40800,                       //  texld            r0,v0,s0
  0x02000001,0x80070800,0x80e40000,                                  //  mov              oC0.xyz,r0
  0x02000001,0x80080800,0xa0000000,                                  //  mov              oC0.w,c0.x
  0x0000ffff,                                                        //  end              
  };
#endif
#if sRENDERER==sRENDER_DX11
  static const sU8 data[] = 
  {
    0x44,0x58,0x42,0x43,0xac,0x5c,0x22,0x7b,0x18,0xb1,0x07,0x0b,0x51,0xda,0x1e,0x9d,
    0xfa,0x0e,0xcb,0xdc,0x01,0x00,0x00,0x00,0x6c,0x02,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xd0,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x54,0x01,0x00,0x00,
    0xf0,0x01,0x00,0x00,0x52,0x44,0x45,0x46,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xff,0xff,
    0x00,0x01,0x00,0x00,0x63,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x73,0x30,0x5f,0x00,0x73,0x30,0x00,0x4d,
    0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,
    0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,
    0x72,0x20,0x39,0x2e,0x32,0x39,0x2e,0x39,0x35,0x32,0x2e,0x33,0x31,0x31,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x48,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
    0x43,0x4f,0x4c,0x4f,0x52,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,
    0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,0x41,0x52,0x47,0x45,
    0x54,0x00,0xab,0xab,0x53,0x48,0x44,0x52,0x94,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x25,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,
    0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,
    0x45,0x00,0x00,0x09,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x82,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x3e,0x00,0x00,0x01,
    0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  };
#endif
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_PIXEL,0,0);
#endif
}

void BlockTransMtrl::SelectShaders(sVertexFormatHandle *format)
{
#line 123 "kbfx_shader.asc"

    VertexShader = VS();
    PixelShader = PS();
  
#line 400 "kbfx_shader.cpp"
}

sShader *Glitch2DMtrl::VS()
{
#if sRENDERER==sRENDER_DX9
  static const sU32 data[] = 
  {
  0xfffe0300,                                                        //  vs_3_0           
  0x0200001f,0x80000000,0x900f0000,                                  //  dcl_position     v0
  0x0200001f,0x8000000a,0x900f0001,                                  //  dcl_color0       v1
  0x0200001f,0x80000005,0x900f0002,                                  //  dcl_texcoord0    v2
  0x0200001f,0x80010005,0x900f0003,                                  //  dcl_texcoord1    v3
  0x0200001f,0x80000000,0xe00f0000,                                  //  dcl_position     oT0
  0x0200001f,0x80000005,0xe0030001,                                  //  dcl_texcoord0    oT1.xy
  0x0200001f,0x80010005,0xe0030002,                                  //  dcl_texcoord1    oT2.xy
  0x0200001f,0x8000000a,0xe00f0003,                                  //  dcl_color0       oT3
  0x03000005,0x800f0000,0xa0e40001,0x90550000,                       //  mul              r0,c1,v0.y
  0x04000004,0x800f0000,0x90000000,0xa0e40000,0x80e40000,            //  mad              r0,v0.x,c0,r0
  0x04000004,0x800f0000,0x90aa0000,0xa0e40002,0x80e40000,            //  mad              r0,v0.z,c2,r0
  0x03000002,0xe00f0000,0x80e40000,0xa0e40003,                       //  add              oT0,r0,c3
  0x02000001,0xe0030001,0x90e40002,                                  //  mov              oT1.xy,v2
  0x02000001,0xe0030002,0x90e40003,                                  //  mov              oT2.xy,v3
  0x02000001,0xe00f0003,0x90e40001,                                  //  mov              oT3,v1
  0x0000ffff,                                                        //  end              
  };
#endif
#if sRENDERER==sRENDER_DX11
  static const sU8 data[] = 
  {
    0x44,0x58,0x42,0x43,0x73,0x17,0x45,0x5b,0x1c,0x5c,0xc2,0xbc,0xe6,0xe2,0xa1,0xd9,
    0x1e,0x75,0xaa,0xf2,0x01,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xf4,0x00,0x00,0x00,0x7c,0x01,0x00,0x00,0x08,0x02,0x00,0x00,
    0x64,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0xb8,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x40,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xfe,0xff,
    0x00,0x01,0x00,0x00,0x84,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x5f,0x30,0x00,0x3c,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x76,0x70,0x00,
    0x02,0x00,0x03,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,
    0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,
    0x65,0x72,0x20,0x39,0x2e,0x32,0x39,0x2e,0x39,0x35,0x32,0x2e,0x33,0x31,0x31,0x31,
    0x00,0xab,0xab,0xab,0x49,0x53,0x47,0x4e,0x80,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x71,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x0f,0x00,0x00,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x77,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x03,0x03,0x00,0x00,0x50,0x4f,0x53,0x49,0x54,0x49,0x4f,0x4e,0x00,0x43,0x4f,0x4c,
    0x4f,0x52,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0x4f,0x53,0x47,0x4e,
    0x84,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x68,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x0c,0x00,0x00,0x74,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0c,0x03,0x00,0x00,0x7d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x50,
    0x4f,0x53,0x49,0x54,0x49,0x4f,0x4e,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0x43,0x4f,0x4c,0x4f,0x52,0x00,0xab,0x53,0x48,0x44,0x52,0x54,0x01,0x00,0x00,
    0x40,0x00,0x01,0x00,0x55,0x00,0x00,0x00,0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,
    0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0xf2,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x32,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,
    0x32,0x10,0x10,0x00,0x03,0x00,0x00,0x00,0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0x32,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xc2,0x20,0x10,0x00,0x01,0x00,0x00,0x00,
    0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x68,0x00,0x00,0x02,
    0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x56,0x15,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x06,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0xa6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0xc2,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x06,0x14,0x10,0x00,0x03,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x1e,0x10,0x00,0x01,0x00,0x00,0x00,
    0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  };
#endif
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_VERTEX,0,0);
#endif
}

sShader *Glitch2DMtrl::PS()
{
#if sRENDERER==sRENDER_DX9
  static const sU32 data[] = 
  {
  0xffff0300,                                                        //  ps_3_0           
  0x05000051,0xa00f0000,0x3f800000,0x00000000,0xbf800000,0x00000000, //  def              c0,  1.000,  0.000, -1.000,  0.000
  0x0200001f,0x8000000a,0x900f0000,                                  //  dcl              v0
  0x0200001f,0x80000005,0x90030001,                                  //  dcl              v1.xy
  0x0200001f,0x80010005,0x90010002,                                  //  dcl              v2.x
  0x0200001f,0x90000000,0xa00f0800,                                  //  dcl_2d           s0
  0x03000042,0x800f0000,0x90e40001,0xa0e40800,                       //  texld            r0,v1,s0
  0x02000001,0x80030001,0x90e40001,                                  //  mov              r1.xy,v1
  0x04000004,0x800f0001,0x90000002,0xa0640000,0x80440001,            //  mad              r1,v2.x,c0.xyzy,r1.xyxy
  0x03000042,0x800f0002,0x80e40001,0xa0e40800,                       //  texld            r2,r1,s0
  0x03000042,0x800f0001,0x80ee0001,0xa0e40800,                       //  texld            r1,r1.zwzw,s0
  0x02000001,0x80040000,0x80aa0001,                                  //  mov              r0.z,r1.z
  0x04000004,0x80090000,0x80000002,0xa0640000,0xa0250000,            //  mad              r0.xw,r2.x,c0.xyzy,c0.yyzx
  0x03000005,0x800f0800,0x80e40000,0x90e40000,                       //  mul              oC0,r0,v0
  0x0000ffff,                                                        //  end              
  };
#endif
#if sRENDERER==sRENDER_DX11
  static const sU8 data[] = 
  {
    0x44,0x58,0x42,0x43,0x4c,0x7a,0x0b,0x2c,0x03,0x84,0x16,0xcc,0xf3,0xba,0x3e,0x77,
    0x13,0x17,0xeb,0x0c,0x01,0x00,0x00,0x00,0x98,0x03,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xd0,0x00,0x00,0x00,0x38,0x01,0x00,0x00,0x6c,0x01,0x00,0x00,
    0x1c,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xff,0xff,
    0x00,0x01,0x00,0x00,0x63,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x73,0x30,0x5f,0x00,0x73,0x30,0x00,0x4d,
    0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,
    0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,
    0x72,0x20,0x39,0x2e,0x32,0x39,0x2e,0x39,0x35,0x32,0x2e,0x33,0x31,0x31,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x60,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x0f,0x00,0x00,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
    0x56,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0c,0x04,0x00,0x00,0x43,0x4f,0x4c,0x4f,0x52,0x00,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,
    0x53,0x56,0x5f,0x54,0x41,0x52,0x47,0x45,0x54,0x00,0xab,0xab,0x53,0x48,0x44,0x52,
    0xa8,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x6a,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0xf2,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x62,0x10,0x00,0x03,0x42,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x03,0x00,0x00,0x00,
    0x36,0x00,0x00,0x05,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x2a,0x10,0x10,0x00,
    0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x08,0xa2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x45,0x00,0x00,0x09,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x09,0xf2,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x22,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x36,0x00,0x00,0x06,
    0x42,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x2a,0x10,0x10,0x80,0x41,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xe6,0x0a,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x45,0x00,0x00,0x09,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x42,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x82,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x38,0x00,0x00,0x07,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x1e,0x10,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,
    0x74,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  };
#endif
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_PIXEL,0,0);
#endif
}

void Glitch2DMtrl::SelectShaders(sVertexFormatHandle *format)
{
#line 174 "kbfx_shader.asc"

    VertexShader = VS();
    PixelShader = PS();
  
#line 604 "kbfx_shader.cpp"
}


/****************************************************************************/


/****************************************************************************/

